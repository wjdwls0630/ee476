import math
import numpy as np


def twos_comp(val, bits):
    bh = math.ceil(bits/4)
    val = format((val % (1<<bits)),"0"+str(bh)+"x")#.replace("0x","")
    return val

def get_bin_index(val, index):
     if (len(val)<16):
        val = "0"*(16-len(val))+val
     return val[index]

initial_text = "; Vector file auto-generated by grader\n \
;\n \
;  I/O specifications\n \
radix 111 4444 4444 4444 1 1 1\n \
io iii iiii iiii oooo o o o\n \
;\n \
;  Inputs and outputs\n \
vname ctrl_ideal<<2:0>> op0_ideal<<15:0>> op1_ideal<<15:0>> alu_out<<15:0>> v_flag n_flag c_flag\n \
;\n \
;  Timing and voltage parameters\n \
tunit ns\n \
tdelay 0.0\n \
trise 0.0\n \
tfall 0.0\n \
vil 0.0\n \
vih 1.2\n \
vol 0.4\n \
voh 0.8\n \
;Initialization\n \
0.0 000 0000 0000 xxxx x x x \n"
###printinitial_text)
max_number = 2**15

A = np.random.randint(2*max_number,size=100)-max_number
B = np.random.randint(2*max_number,size=100)-max_number
S = A + B

#SB = twos_comp(S,17)
vec = open("ALU_verification.vec","w")

vec.write(initial_text)

counter = 1

for i in range(0,len(A)):
    BB = twos_comp(B[i],16)
    AA = twos_comp(A[i],16)
    SB = format(int(AA,16)+int(BB,16),"#17b")
    Shex = format(int(AA,16)+int(BB,16),"04x").replace("0x","")
    if(len(Shex)==5):
        Shex=Shex[1:5]
    if(len(Shex)==3):
        Shex = "0" + Shex
    if(len(Shex)==2):
        Shex = "00" + Shex
    if(len(Shex)==1):
        Shex = "000" + Shex
    SB = SB.replace("0b","")
   
    AA_bin=bin(int(AA,16)).replace("0b","")
    AA_15_bin=get_bin_index(AA_bin, 0)
    BB_bin=bin(int(BB,16)).replace("0b","")
    BB_15_bin=get_bin_index(BB_bin, 0)
    SB_bin= SB[1:] if (len(SB)==17) else SB 
    SB_15_bin=get_bin_index(SB_bin, 0)
    Soverflow = 1 if (int(AA_15_bin,2) & int(BB_15_bin,2) & ~int(SB_15_bin,2))|(~int(AA_15_bin,2) & ~int(BB_15_bin,2) & int(SB_15_bin,2)) else 0
    v_flag=Soverflow
    #format(int(AA,16)+int(BB,16),"#18b").replace("0b","")
    #if(len(str(Soverflow))==18):
    #    v_flag = 1
    #else:
    #    v_flag = 0

    if(len(str(SB))>16 and str(SB)[0] == "1"):
        c_flag = 1
    else:
        c_flag = 0
    
    if(len(str(SB))==16):
        if(str(SB)[0] == "1"):
            n_flag = 1
        else:
            n_flag = 0
    elif(len(str(SB))==17):
        if(str(SB)[1] == "1"):
            n_flag = 1
        else:
            n_flag = 0
    else:
        n_flag = 0

    SB = format(int(SB,16),"04x").replace("0x","")
    AA = format(int(AA,16),"04x").replace("0x","")
    BB = format(int(BB,16),"04x").replace("0x","")

    ##printc_flag)
    ##printn_flag)


    line = str(counter)+ ".0 100 " + AA +" " +BB+ " " + "xxxx" + " " + "x" + " " + "x" + " " + "x" + "\n"
    counter = counter + 1
    vec.write(line) 
    line = str(counter)+ ".0 100 " + AA +" " +BB+ " " + Shex + " " + str(v_flag) + " " + str(n_flag) + " " + str(c_flag) + "\n"
    counter = counter + 1
    vec.write(line)


vec.write("; substraction part \n")
#####################################################################################################################################################

for i in range(0,len(A)):
    BB = twos_comp(B[i],16)
    AA = twos_comp(~A[i],16)
     
    #printtwos_comp(A[i],16))
    SB = format(int(AA,16)+int(BB,16)+1,"#17b")
    Shex = format(int(AA,16)+int(BB,16)+1,"04x").replace("0x","")
    #print"-->" + Shex)
    if(len(Shex)==5):
        Shex=Shex[1:5]
        #print"------>" + Shex)
    if(len(Shex)==3):
        Shex = "0" + Shex
    if(len(Shex)==2):
        Shex = "00" + Shex
    if(len(Shex)==1):
        Shex = "000" + Shex
    SB = SB.replace("0b","")
    AA_bin=bin(int(AA,16)).replace("0b","")
    AA_15_bin=get_bin_index(AA_bin, 0)
    BB_bin=bin(int(BB,16)).replace("0b","")
    BB_15_bin=get_bin_index(BB_bin, 0)
    SB_bin= SB[1:] if (len(SB)==17) else SB 
    SB_15_bin=get_bin_index(SB_bin, 0)
    Soverflow = 1 if (int(AA_15_bin,2) & int(BB_15_bin,2) & ~int(SB_15_bin,2))|(~int(AA_15_bin,2) & ~int(BB_15_bin,2) & int(SB_15_bin,2)) else 0
    v_flag=Soverflow
    #Soverflow = format(int(AA,16)+int(BB,16)+1,"#18b").replace("0b","")
    #Soverflow = 1 if (int(AA[0],2)&int(BB[0],2)&(~int(SB[1],2)))|((~int(AA[0],2))&(~int(BB[0],2))&int(SB[1],2)) else 0
    #v_flag=Soverflow
    #if(len(str(Soverflow))==18):
    #    v_flag = 1
    #else:
    #    v_flag = 0

    if(len(str(SB))>16 and str(SB)[0] == "1"):
        c_flag = 1
    else:
        c_flag = 0
    
    if(len(str(SB))==16):
        if(str(SB)[0] == "1"):
            n_flag = 1
        else:
            n_flag = 0
    elif(len(str(SB))==17):
        if(str(SB)[1] == "1"):
            n_flag = 1
        else:
            n_flag = 0
    else:
        n_flag = 0
    AA = twos_comp(A[i],16)
    SB = format(int(SB,16),"04x").replace("0x","")
    AA = format(int(AA,16),"04x").replace("0x","")
    BB = format(int(BB,16),"04x").replace("0x","")

    ##printc_flag)
    ##printn_flag)


    line = str(counter)+ ".0 101 " + AA +" " +BB+ " " + "xxxx" + " " + "x" + " " + "x" + " " + "x" + "\n"
    counter = counter + 1
    vec.write(line) 
    line = str(counter)+ ".0 101 " + AA +" " +BB+ " " + Shex + " " + str(v_flag) + " " + str(n_flag) + " " + str(c_flag) + "\n"
    counter = counter + 1
    vec.write(line)


vec.write("; and logic \n")
#####################################################################################################################################################

for i in range(0,len(A)):
    BB = twos_comp(B[i],16)
    AA = twos_comp(A[i],16)
    SB = format(int(AA,16)&int(BB,16),"#17b")
    Shex = format(int(AA,16)&int(BB,16),"04x").replace("0x","")
    if(len(Shex)==5):
        Shex=Shex[1:5]
    if(len(Shex)==3):
        Shex = "0" + Shex
    if(len(Shex)==2):
        Shex = "00" + Shex
    if(len(Shex)==1):
        Shex = "000" + Shex
    SB = SB.replace("0b","")
    Soverflow = format(int(AA,16)+int(BB,16),"#18b").replace("0b","")
    if(len(str(Soverflow))==18):
        v_flag = 1
    else:
        v_flag = 0

    if(len(str(SB))>16 and str(SB)[0] == "1"):
        c_flag = 1
    else:
        c_flag = 0
    
    if(len(str(SB))==16):
        if(str(SB)[0] == "1"):
            n_flag = 1
        else:
            n_flag = 0
    elif(len(str(SB))==17):
        if(str(SB)[1] == "1"):
            n_flag = 1
        else:
            n_flag = 0
    else:
        n_flag = 0

    SB = format(int(SB,16),"04x").replace("0x","")
    AA = format(int(AA,16),"04x").replace("0x","")
    BB = format(int(BB,16),"04x").replace("0x","")

    ##printc_flag)
    ##printn_flag)


    line = str(counter)+ ".0 000 " + AA +" " +BB+ " " + "xxxx" + " " + "x" + " " + "x" + " " + "x" + "\n"
    counter = counter + 1
    vec.write(line) 
    line = str(counter)+ ".0 000 " + AA +" " +BB+ " " + Shex + " " + "x" + " " + str(n_flag) + " " + "x" + "\n"
    counter = counter + 1
    vec.write(line)


vec.write("; or logic \n")
#####################################################################################################################################################

for i in range(0,len(A)):
    BB = twos_comp(B[i],16)
    AA = twos_comp(A[i],16)
    SB = format(int(AA,16)|int(BB,16),"#17b")
    Shex = format(int(AA,16)|int(BB,16),"04x").replace("0x","")
    if(len(Shex)==5):
        Shex=Shex[1:5]
    if(len(Shex)==3):
        Shex = "0" + Shex
    if(len(Shex)==2):
        Shex = "00" + Shex
    if(len(Shex)==1):
        Shex = "000" + Shex
    SB = SB.replace("0b","")
    Soverflow = format(int(AA,16)+int(BB,16),"#18b").replace("0b","")
    if(len(str(Soverflow))==18):
        v_flag = 1
    else:
        v_flag = 0

    if(len(str(SB))>16 and str(SB)[0] == "1"):
        c_flag = 1
    else:
        c_flag = 0
    
    if(len(str(SB))==16):
        if(str(SB)[0] == "1"):
            n_flag = 1
        else:
            n_flag = 0
    elif(len(str(SB))==17):
        if(str(SB)[1] == "1"):
            n_flag = 1
        else:
            n_flag = 0
    else:
        n_flag = 0

    SB = format(int(SB,16),"04x").replace("0x","")
    AA = format(int(AA,16),"04x").replace("0x","")
    BB = format(int(BB,16),"04x").replace("0x","")

    ##printc_flag)
    ##printn_flag)


    line = str(counter)+ ".0 010 " + AA +" " +BB+ " " + "xxxx" + " " + "x" + " " + "x" + " " + "x" + "\n"
    counter = counter + 1
    vec.write(line) 
    line = str(counter)+ ".0 010 " + AA +" " +BB+ " " + Shex + " " + "x" + " " + str(n_flag) + " " + "x" + "\n"
    counter = counter + 1
    vec.write(line)



vec.write("; xor logic \n")
#####################################################################################################################################################

for i in range(0,len(A)):
    BB = twos_comp(B[i],16)
    AA = twos_comp(A[i],16)
    SB = format(int(AA,16)^int(BB,16),"#17b")
    Shex = format(int(AA,16)^int(BB,16),"04x").replace("0x","")
    if(len(Shex)==5):
        Shex=Shex[1:5]
    if(len(Shex)==3):
        Shex = "0" + Shex
    if(len(Shex)==2):
        Shex = "00" + Shex
    if(len(Shex)==1):
        Shex = "000" + Shex
    SB = SB.replace("0b","")
    Soverflow = format(int(AA,16)+int(BB,16),"#18b").replace("0b","")
    if(len(str(Soverflow))==18):
        v_flag = 1
    else:
        v_flag = 0

    if(len(str(SB))>16 and str(SB)[0] == "1"):
        c_flag = 1
    else:
        c_flag = 0
    
    if(len(str(SB))==16):
        if(str(SB)[0] == "1"):
            n_flag = 1
        else:
            n_flag = 0
    elif(len(str(SB))==17):
        if(str(SB)[1] == "1"):
            n_flag = 1
        else:
            n_flag = 0
    else:
        n_flag = 0

    SB = format(int(SB,16),"04x").replace("0x","")
    AA = format(int(AA,16),"04x").replace("0x","")
    BB = format(int(BB,16),"04x").replace("0x","")

    ##printc_flag)
    ##printn_flag)


    line = str(counter)+ ".0 001 " + AA +" " +BB+ " " + "xxxx" + " " + "x" + " " + "x" + " " + "x" + "\n"
    counter = counter + 1
    vec.write(line) 
    line = str(counter)+ ".0 001 " + AA +" " +BB+ " " + Shex + " " + "x" + " " + str(n_flag) + " " + "x" + "\n"
    counter = counter + 1
    vec.write(line)



vec.write("; not logic \n")
#####################################################################################################################################################

for i in range(0,len(A)):
    BB = twos_comp(B[i],16)
    AA = twos_comp(A[i],16)
    SB = format(int(AA,16),"#16b")
    address=0
    for k in range(0,len(SB)):
        
        if(SB[k]=="b"):
            address=k
        else:
            address=address

    SB = SB[address+1:len(SB)]
    #print(SB)
    if(len(SB)<16):
        char = ""
        for j in range(0,16-len(SB)):
            char = char + "0"
        SB = char + SB
    #print(SB)
    SB = SB.replace("0","2")
    SB = SB.replace("1","0")
    SB = SB.replace("2","1")
    #printSB
    Shex = format(int(AA,16),"04x").replace("0x","")
    if(len(Shex)==5):
        Shex=Shex[1:5]
    if(len(Shex)==3):
        Shex = "0" + Shex
    if(len(Shex)==2):
        Shex = "00" + Shex
    if(len(Shex)==1):
        Shex = "000" + Shex
    #SB = SB.replace("0b","")
    Soverflow = format(int(AA,16)+int(BB,16),"#18b").replace("0b","")
    if(len(str(Soverflow))==18):
        v_flag = 1
    else:
        v_flag = 0

    if(len(str(SB))>16 and str(SB)[0] == "1"):
        c_flag = 1
    else:
        c_flag = 0
    
    if(len(str(SB))==16):
        if(str(SB)[0] == "1"):
            n_flag = 1
        else:
            n_flag = 0
    elif(len(str(SB))==17):
        if(str(SB)[1] == "1"):
            n_flag = 1
        else:
            n_flag = 0
    else:
        n_flag = 0
    #print(SB)
    SB = format(int(SB,2),"04x").replace("0x","")
    AA = format(int(AA,16),"04x").replace("0x","")
    BB = format(int(BB,16),"04x").replace("0x","")

    ##printc_flag)
    ##printn_flag)


    line = str(counter)+ ".0 011 " + AA +" " +BB+ " " + "xxxx" + " " + "x" + " " + "x" + " " + "x" + "\n"
    counter = counter + 1
    vec.write(line) 
    line = str(counter)+ ".0 011 " + AA +" " +BB+ " " + SB + " " + "x" + " " + str(n_flag) + " " + "x" + "\n"
    counter = counter + 1
    vec.write(line)





vec.close()

