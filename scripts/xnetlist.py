#!/usr/bin/env python3
# Updated by Hansem Ro <hansemro@outlook.com> on Oct. 13, 2020 and Oct. 2, 2021
import sys
import os
import re
import subprocess
from argparse import ArgumentParser
import getpass

#print(os.environ.get('PATH', ''))
print(os.environ.get('LD_LIBRARY_PATH', ''))

#Example
# xnetlist -l clocking -c charge_pump -v schematic -d /home/sathe/proj/clocking/cadence -n /home/sathe/proj/clocking/spice

parser = ArgumentParser()
parser.add_argument("-l", "--library", dest="library", help="CDS library name")
parser.add_argument("-c", "--cell", dest="cell", help="CDS cell name")
parser.add_argument("-v", "--view", dest="view", default="schematic", help="CDS view name [default: %default]")
parser.add_argument("-d", "--design", dest="design", default="~/cadence/tsmc65", help="CDS design directory location [default: %default]")
parser.add_argument("-n", "--netlist", dest="netlist", default=".", help="Output netlist location [default: %default]")
parser.add_argument("-t", "--topsub", dest="topsub", action="store_true", default=False, help="Create top level as a subcircuit [default: %default]")
args = parser.parse_args()

cwd=os.getcwd()
os.chdir(args.design)
#Generate ocean shell
#filename = f"xnetlist_{args.library}_{args.cell}.ocn"
ocnfile = f"/tmp/xnetlist_{getpass.getuser()}.ocn"
print(ocnfile)
fh=open(ocnfile,"w")
fh.write(";Autogenerated code for netlisting]\n")
fh.write(f";LibName:{args.library} CellName:{args.cell} ViewName:{args.view}\n")
fh.write(f"ocnxlProjectDir(\"{args.netlist}\")\n")
fh.write("simulator(\"hspiceD\")\n")
fh.write(f"design(\"{args.library}\" \"{args.cell}\" \"{args.view}\")\n")
if(args.topsub):
    fh.write("envOption(\'setTopLevelAsSubckt t)\n")
fh.write("createNetlist(?recreateAll t  ?display nil)\n")
fh.close()

#Execute the ocean shell

subprocess.call(f"ocean -64 < {ocnfile}", shell=True, executable="/bin/tcsh")
#os.remove(ocnfile)
os.chdir(cwd)
# move file out of directory and delete directory
# os.system("mv %s/%s/hspiceD/schematic/netlist/input.ckt %s/%s.ckt" % (args.netlist, args.cell, args.netlist, args.cell))
# os.system("rm -rf %s/%s" % (args.netlist, args.cell))

